name: Build & Release Scheduler

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: pip install pyinstaller

      # Build Windows EXE using Windows runner
      - name: Build Windows EXE
        run: |
          if [ "$(uname -s)" = "Linux" ]; then
            echo "Skipping Windows build on Linux runner"
          else
            pyinstaller --onefile --windowed --add-data "schedule_data.json;." main.py
          fi

      # Build macOS EXE
      - name: Build macOS EXE
        run: |
          if [ "$(uname -s)" != "Darwin" ]; then
            echo "Skipping macOS build on non-macOS runner"
          else
            pyinstaller --onefile --windowed --add-data "schedule_data.json:." main.py
          fi

      # Create GitHub release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload Windows EXE
      - name: Upload Windows EXE
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/main.exe
          asset_name: scheduler-windows.exe
          asset_content_type: application/octet-stream

      # Upload macOS EXE
      - name: Upload macOS EXE
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/main
          asset_name: scheduler-macos
          asset_content_type: application/octet-stream

